################################################################
class Node:

	def __init__(self,val):
		self.val=val
		self.left=None
		self.right=None
		self.parent=None
class bintree:
	
	def __init__(self):
		self.root=None

# for making a bst with parent pointer#
	def addbst(self,val):
		if self.root==None:
			self.root=Node(val)
		else:
			self.addbsthelper(self.root,val)
	
	def addbsthelper(self,node,val):
		if val<node.val:
			if node.left:
				self.addbsthelper(node.left,val)
			else:
				node.left=Node(val)
				node.left.parent=node
		else:
			if node.right:
				self.addbsthelper(node.right,val)
			else:
				node.right=Node(val)
				node.right.parent=node

################################################################
### return the pointer to the desired node for which we have to find the inorder successor ###
def ptr(node,val):
	if node==None:
		return None
	if val==node.val:
		return node
	elif val<node.val:
		return ptr(node.left,val)
	else:
		return ptr(node.right,val)


################################################################

def inordersuc(node):
	if node.right!=None:
		return helper1(node.right)
	return helper2(node)


def helper1(node):
	if node.left:
		return helper1(node.left)
	else:
		return node.val

def helper2(node):
	if node.parent==None:
		return None
	if node.parent.right==node:
		return helper2(node.parent)
	if node.parent.left==node:
		return 	node.parent.val	
		
b=bintree()

for i in [10,5,15,2,8,20,1,3,9,19,30,4,7,28,31]:
	b.addbst(i)

#value of node to be searched for	
val=4

node=ptr(b.root,val)

print inordersuc(node)