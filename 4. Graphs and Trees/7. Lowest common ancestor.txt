################################################################
class Node:

	def __init__(self,val):
		self.val=val
		self.left=None
		self.right=None
		self.parent=None
class bintree:
	
	def __init__(self):
		self.root=None

# for making a bst with parent pointer#
	def addbst(self,val):
		if self.root==None:
			self.root=Node(val)
		else:
			self.addbsthelper(self.root,val)
	
	def addbsthelper(self,node,val):
		if val<node.val:
			if node.left:
				self.addbsthelper(node.left,val)
			else:
				node.left=Node(val)
				node.left.parent=node
		else:
			if node.right:
				self.addbsthelper(node.right,val)
			else:
				node.right=Node(val)
				node.right.parent=node

################################################################
### returns the pointer of the desired node for which we have to find the lca ###
def ptr(node,val):
	if node==None:
		return None
	if val==node.val:
		return node
	elif val<node.val:
		return ptr(node.left,val)
	else:
		return ptr(node.right,val)


################################################################

def lca(node,n1,n2):
	
	if node==None or node==n1 or node==n2:
		return node
	
	l=lca(node.left,n1,n2)
	r=lca(node.right,n1,n2)

	if n1==l and n2==r or n1==r and n2==l:
		return node

	return l or r 
	
b=bintree()

for i in [10,5,15,2,8,20,1,3,9,19,30,4,7,28,31]:
	b.addbst(i)

#value of nodes for which teh ancestor is to be searched for	
val1=31
val2=19
node1=ptr(b.root,val1)
node2=ptr(b.root,val2)
print lca(b.root,node1,node2).val
