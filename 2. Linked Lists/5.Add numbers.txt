### digits stored in reverse order  O(n+m) ###

class Node:
	def __init__(self,val):
		self.next=None
		self.val=val

head1=Node(1)
p=head1
l=[4,3]
for i in l:
	p.next=Node(i)
	p=p.next

head2=Node(9)
p=head2
l=[5,9]
for i in l:
	p.next=Node(i)
	p=p.next

head3=Node(9)
p=head3
l=[9]
for i in l:
	p.next=Node(i)
	p=p.next

def add_lists(head1,head2):
	head=None
	p=None
	carry=0
	while head1 and head2:
		val=head1.val+head2.val+carry
		carry=val/10
		val=val%10
		if head==None:
			head=Node(val)
			p=head
		else:
			p.next=Node(val)
			p=p.next
		head1=head1.next
		head2=head2.next

	while head1:
		val=head1.val+carry
		carry=val/10
		val=val%10
		if head==None:
			head=Node(val)
			p=head
		else:
			p.next=Node(val)
			p=p.next
		head1=head1.next	
	while head2:
		val=head2.val+carry
		carry=val/10
		val=val%10
		if head==None:
			head=Node(val)
			p=head
		else:
			p.next=Node(val)
			p=p.next
		head2=head2.next
	if carry!=0:
		p.next=Node(carry)
	return head		
	
head=add_lists(head1,head2)

while head:
	print head.val,
	head=head.next 

print

head=add_lists(head1,head3)

while head:
	print head.val,
	head=head.next 

### digits stored in normal order  O(n+m) ###

class Node:
	def __init__(self,val):
		self.next=None
		self.val=val

head1=Node(1)
p=head1
l=[4,3]
for i in l:
	p.next=Node(i)
	p=p.next

head2=Node(9)
p=head2
l=[5,9]
for i in l:
	p.next=Node(i)
	p=p.next

head3=Node(9)
p=head3
l=[9]
for i in l:
	p.next=Node(i)
	p=p.next

def list_length(p):
	count=0
	while p:
		count+=1
		p=p.next
	return count 
def pad(head,l):
		for i in xrange(l):
			new_node=Node(0)
			new_node.next=head
			head=new_node
		return head

def recursive_add(head1,head2):
	if not head1:	
		return 0
	c=recursive_add(head1.next,head2.next)
	val=head1.val+head2.val+c
	head1.val=val%10
	c=val/10
	return c
	
def add_lists(head1,head2):
	l1=list_length(head1)
	l2=list_length(head2)
	if l1>l2:
		head2=pad(head2,l1-l2)
	if l2>l1:
		head1=pad(head1,l2-l1)		
	c=recursive_add(head1,head2)
	if c!=0:
		cur=Node(c)
		cur.next=head1
		head1=cur
	return head1
		
head=add_lists(head1,head2)

while head:
	print head.val,
	head=head.next 

print
head=add_lists(head3,head2)

while head:
	print head.val,
	head=head.next	